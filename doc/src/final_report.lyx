#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language swedish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Kid-MUD
\begin_inset Newline newline
\end_inset


\size large
Processorienterad programmering (1DT049) våren 2012.
 Slutrapport för grupp 14
\end_layout

\begin_layout Author
Erik Arnerlöv
\begin_inset Newline newline
\end_inset

900406-0092 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Michael Bergroth
\begin_inset Newline newline
\end_inset

910123-4194 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Magnus Lång
\begin_inset Newline newline
\end_inset

910409-2672 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Mikael Wiberg
\begin_inset Newline newline
\end_inset

840526-0194
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Inledning
\end_layout

\begin_layout Standard
Ett MUD (Multi User Dungeon) är ett textbaserat flerspelarspel där spelare
 utför handlingar genom att skriva dem (såsom 
\begin_inset Quotes sld
\end_inset

go north
\begin_inset Quotes srd
\end_inset

 eller 
\begin_inset Quotes sld
\end_inset

attack Goblin
\begin_inset Quotes srd
\end_inset

).
 Världen är uppdelad i 
\emph on
zoner
\emph default
, och varje spelare befinner sig i en av världens zoner åt gången, och kan
 förflytta sig till intilliggande zoner.
\end_layout

\begin_layout Subsection
Mål och Syfte
\end_layout

\begin_layout Standard
Syftet med projektet är att konstruera ett 
\emph on
MUD
\emph default
 med fokus på samtidighet för att kunna skala på multiprocessorsystem.
 Målet är att bygga ett fullt fungerande 
\emph on
MUD
\emph default
 med så många funktioner som vi hinner med.
\end_layout

\begin_layout Subsection
Avgränsningar
\end_layout

\begin_layout Standard
Vi valde att inte implementera ett Telnet-interface trots att detta är en
 kännetecknande komponent hos ett 
\emph on
MUD
\emph default
 eftersom vi ville lägga fokus på samtidigheten och grundläggande funktionalitet.
\end_layout

\begin_layout Section
Kid-MUD
\end_layout

\begin_layout Standard
När man loggar in i systemet så anger man namn på den karaktär man vill
 spela.
 Om karaktären inte finns så skapas den.
 Efter dess så anländer man i en zon.
 När man anländer till en zon så får man en beskrivning av hur zonen ser
 ut, vilka andra spelare och icke-spelare (NPC-er) som står där samt vart
 man kan gå (se Figur 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:loggar-in"

\end_inset

).
 Denna information kan man få upprepad för sig genom att skriva 
\begin_inset Quotes sld
\end_inset


\family typewriter
look
\family default

\begin_inset Quotes srd
\end_inset

.
 Man kan också få endast raden om vart man kan gå genom att skriva 
\begin_inset Quotes sld
\end_inset


\family typewriter
exits
\family default

\begin_inset Quotes srd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
Name?> 
\color red
Gustav
\end_layout

\begin_layout Plain Layout

\family typewriter
Welcome to Kid-MUD!
\end_layout

\begin_layout Plain Layout

\family typewriter
You are on the bridge that connects the town to the outside world.
 Beneath the bridge runs a mighty river and to the south you see a large
 waterfall pouring down huge amounts of water from the tall mountain.
 The sound of the waterfall is almost deafening.
 To the north you can see the river flowing towards the great sea.
 To the west you have the town and to the east you see the road continues
 to follow along the foot of the mountain.
\end_layout

\begin_layout Plain Layout

\family typewriter
Here stands a Frog 
\end_layout

\begin_layout Plain Layout

\family typewriter
There are exits to east, west
\end_layout

\begin_layout Plain Layout

\family typewriter
?> 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
När du loggar in
\begin_inset CommandInset label
LatexCommand label
name "fig:loggar-in"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
När man väl är i en zon så finns det en del saker att göra.
 Man kan till exempel skriva 
\begin_inset Quotes sld
\end_inset


\family typewriter
say 
\emph on
Meddelande
\family default
\emph default

\begin_inset Quotes srd
\end_inset

 för att säga saker till andra spelare i samma zon.
 Man kan även prata privat med en godtyckig spelare genom att skriva 
\begin_inset Quotes sld
\end_inset


\family typewriter
tell 
\emph on
Vem
\emph default
 
\emph on
Meddelande
\family default
\emph default

\begin_inset Quotes srd
\end_inset

.
 Man kan också attackera spelare och icke-spelare genom att skriva 
\begin_inset Quotes sld
\end_inset


\family typewriter
attack 
\emph on
Vem
\family default
\emph default

\begin_inset Quotes srd
\end_inset

, och för att sluta slåss skriver man 
\begin_inset Quotes sld
\end_inset


\family typewriter
stop
\family default

\begin_inset Quotes srd
\end_inset

, eller väntar på att offret dör.
 Om man vill uppskatta sina chanser mot en icke-spelare kan man använda
 kommandot 
\begin_inset Quotes sld
\end_inset


\family typewriter
consider 
\emph on
Vem
\family default
\emph default

\begin_inset Quotes srd
\end_inset

.
 När man inser att man aldrig kan vinna striden man är i så är det lämpligt
 att fly.
 För att gå till en annan zon så skriver man 
\begin_inset Quotes sld
\end_inset


\family typewriter
go 
\emph on
Väderstreck
\family default
\emph default

\begin_inset Quotes srd
\end_inset

.
 Man kan bara gå i de riktningar som antyddes av 
\begin_inset Quotes sld
\end_inset


\family typewriter
exits
\family default

\begin_inset Quotes srd
\end_inset

.
\end_layout

\begin_layout Section
Programmeringsspråk
\end_layout

\begin_layout Standard
Vi valde att skriva systemet i Erlang för att det är ett språk vi trodde
 skulle vara lämpad till att lösa uppgiften så att vi kunde utnyttja oss
 utav samtidighet som uppgiften krävde.
 Fördelarna är att det är väldigt lätt att skriva kod som utnyttjar samtidighet
 och att meddelandepassningen samt de lätta processerna i Erlang fungerar
 väldigt bra till sättet vi valde att lösa problemet på.
 Vidare så var 
\emph on
Mnesia
\emph default
, som är en i Erlang inbyggd databas, mycket behändig för våra datalagringsbehov.
\end_layout

\begin_layout Standard
Dessutom 
\end_layout

\begin_layout Section
Systemarkitektur
\end_layout

\begin_layout Standard
Kort sammanfattning om vad varje modul gör i programmet.
 I Figur 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:moduler"

\end_inset

 kan man se hur modulerna kommunicerar och är uppdelade i supervisor-träd.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename system_architecture.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Moduler som kommuniserar och supervisorträd
\begin_inset CommandInset label
LatexCommand label
name "fig:moduler"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Description
player.erl
\end_layout

\begin_deeper
\begin_layout Standard
player.erl är den modul som ligger emellan klienten och själva systemet.
 Alla kommandon som klienten skriver skickas till player som sedan tolkar
 kommandot med en parser och utför kommandot genom att skicka vidare meddelanden
 till andra moduler.
 player.erl håller även reda på spelarens status, såsom om man är i en strid
 och spelarens liv.
\end_layout

\end_deeper
\begin_layout Description
playermaster.erl
\end_layout

\begin_deeper
\begin_layout Standard
Tar hand om första anslutningen till servern från klienten.
 Använder sig av player_sup.erl att starta nya player-processer.
 Har även en lista över alla inloggade spelare och har funktioner för att
 skicka meddelanden till alla vid speciella händelser samt att spelare att
 kunna prata med en enskild person.
 
\end_layout

\end_deeper
\begin_layout Description
player_sup.erl
\end_layout

\begin_deeper
\begin_layout Standard
En supervisor för alla player-processer
\end_layout

\end_deeper
\begin_layout Description
client.erl
\end_layout

\begin_deeper
\begin_layout Standard
Detta är modulen som skickar vidare skrivna kommandon av spelaren samt tar
 emot meddelanden om vad som händer.
 
\end_layout

\end_deeper
\begin_layout Description
zone.erl
\end_layout

\begin_deeper
\begin_layout Standard
zone.erl tar hand om det som rör en specifik zon.
 Den har data såsom närliggande zoners ID och listor över spelare och NPCs.
 Det är zonen som skickar ut meddelanden till andra spelare som säger vad
 som händer.
\end_layout

\end_deeper
\begin_layout Description
zonemaster.erl
\end_layout

\begin_deeper
\begin_layout Standard
Modulen har koll på vilka zoner som är aktiva, dvs zoner som körs i en egen
 process.
 Om en spelare vill gå till en inaktiv zon så startar zonemaster den zonen
 via zone_sup.
\end_layout

\end_deeper
\begin_layout Description
zone_sup.erl
\end_layout

\begin_deeper
\begin_layout Standard
En supervisor för alla zoner
\end_layout

\end_deeper
\begin_layout Description
npc.erl
\end_layout

\begin_deeper
\begin_layout Standard
npc.erl har hand om information om specifika NPCs.
 
\end_layout

\end_deeper
\begin_layout Description
npc_sup.erl
\end_layout

\begin_deeper
\begin_layout Standard
En supervisor för NPCs.
\end_layout

\end_deeper
\begin_layout Description
parser.erl
\end_layout

\begin_deeper
\begin_layout Standard
Parsern för kommandon från spelaren.
 
\end_layout

\end_deeper
\begin_layout Description
database.erl
\end_layout

\begin_deeper
\begin_layout Standard
Databasen för systemet.
 Lagrar information om zoner, spelare och NPCer.
\end_layout

\end_deeper
\begin_layout Description
kidmud.erl
\end_layout

\begin_deeper
\begin_layout Standard
Applikation som initierar databasen samt startar master_supervisor.
\end_layout

\end_deeper
\begin_layout Description
maploader.erl
\end_layout

\begin_deeper
\begin_layout Standard
Modul som kan läsa en karta från en fil och ladda in den i databasen.
\end_layout

\end_deeper
\begin_layout Description
master_supervisor.erl
\end_layout

\begin_deeper
\begin_layout Standard
En supervisor för playermaster, zonemaster, player_sup, zone_sup och npc_sup.
\end_layout

\end_deeper
\begin_layout Section
Samtidighet
\end_layout

\begin_layout Standard
I Erlang så används message passing.
 Det är väldigt lättanvänt och vi slipper att fundera på synkronisiering
 med delat minne och liknande problem.
 Med hjälp av OTP Design Principles så har vi delat upp koden i calls och
 casts.
 Detta leder till att synkronisiering kan hanteras på ett smidigt sätt när
 processer pratar med varandra.
 Om en process ska vänta på svar från en annan process innan den ska gå
 vidare så används calls för att garantera ett svar.
 Om processen inte vill ha ett svar så används casts.
 Eftersom vi har valt erlang så är message passing det givna valet och vi
 känner att det tillräckligt för våra behov.
 Hade vi valt ett annat programmeringsspråk hade vi kunnat utforska andra
 val.
 I våran nuvarande struktur så finns det inte risk för deadlocks tack vare
 OTP.
\end_layout

\begin_layout Section
Algoritmer och datastrukturer
\end_layout

\begin_layout Standard
De datastrukturer som främst använts är erlangs tupler och records.
 Även listor har används av till exempel 
\emph on
playermaster
\emph default
 för att hålla reda på inloggade spelare, och 
\emph on
zone
\emph default
 för att hålla reda på vilka spelare och icke-spelare som är inloggade.
 I 
\emph on
zonemaster
\emph default
 så används istället ett bbst (balanserat binärt sökträd) ur erlang-modulen
 
\emph on
gb_tree
\emph default
 för att kunna slå i aktiva zoner efter id.
\end_layout

\begin_layout Standard
Records är praktiska eftersom de går att spara i en mnesia-tabell, och för
 att man kan lägga till fält utan att existerande kod slutar fungera.
\end_layout

\begin_layout Standard
När det gäller algoritmer så har vi inte implementerat något mer komplicerat
 än att traversera elementen i en lista, eller raderna i en fil, och utför
 en handling på varje, dessa främst i 
\emph on
zone
\emph default
 och 
\emph on
maploder
\emph default
.
 Övriga algoritmer har uteslutande inbyggda funktioner använts till, främst
 ur modulerna 
\emph on
gb_tree
\emph default
 och 
\emph on
lists
\emph default
.
 
\end_layout

\begin_layout Section
Förslag på förbättringar
\end_layout

\begin_layout Description
Command
\begin_inset space ~
\end_inset

Autocompletion Istället för att behöva skriva all text fullständigt så kan
 det vara behändigt att lägga till ett system som fyller i resten av ett
 t ex.
 kommando som är halvt skrivet.
 Detta är bara tillgängligt om det endast finns ett unikt 
\begin_inset Quotes sld
\end_inset

slut
\begin_inset Quotes srd
\end_inset

 på den text man skriver.
\end_layout

\begin_layout Description
Nerstänging
\begin_inset space ~
\end_inset

av
\begin_inset space ~
\end_inset

server När man inaktiverar servern så skall alla spelare som är inloggade
 få ett medelande att server håller på att stängas ner och därför kommer
 de loggas ut om x antal sekunder.
 Sedan sparars världen och användaren kan ansluta till servern och komma
 till där dom var precis innan servern gick ner.
\end_layout

\begin_layout Description
Grafiska
\begin_inset space ~
\end_inset

förbättringar Olika 
\begin_inset Quotes sld
\end_inset

typer
\begin_inset Quotes srd
\end_inset

 av text skall vara i olika färger så det blir lättare att läsa, även att
 man alltid ska kunna se hur mycket liv man har genom att det alltid står
 längst ner i textrutan för att underlätta strider mellan spelaren och andra.
\end_layout

\begin_layout Description
Inloggnings
\begin_inset space ~
\end_inset

lösenord Varje spelare får välja ett lösenord som de skall använda för att
 logga in.
 Detta för att unvika att oönskade personer får tillträde till karaktärer
 de inte får använda.
\end_layout

\begin_layout Description
Färdighetssystem För att göra allt mer intresant så skulle ett system där
 spelaren kan utvecklas och lära sig nya färdigheter.
 Exempel på färdigheter skulle kunna vara att slå snabbare med ett svärd
 eller lära sig att använda en yxa på ett effektivt sätt.
 Detta kommer göra att strider blir mer intresanta och mindre enformiga.
\end_layout

\begin_layout Description
Personligfiera
\begin_inset space ~
\end_inset

karaktärer För att unvika att alla spelare ser ungefär likadana ut så skulle
 man kunna lägga till en 
\end_layout

\begin_layout Section
Reflektion
\end_layout

\begin_layout Section
Installation och fortsatt utveckling
\end_layout

\begin_layout Standard
De versioner av Erlang som använts är R15B01 och R15B.
 Koden finns att hämta på GitHub
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "github.com/margnus1/kid-mud"
target "http://github.com/margnus1/kid-mud"

\end_inset


\end_layout

\end_inset

.
 Katalogstrukturen hos systemet är följande[under construction]
\end_layout

\begin_layout Standard
Systemet använder sig av Makefile så kompilering görs med kommandot 
\begin_inset Quotes sld
\end_inset

make
\begin_inset Quotes srd
\end_inset

, EUnit-tester körs med kommandot 
\begin_inset Quotes sld
\end_inset

make test
\begin_inset Quotes srd
\end_inset

 samt EDoc-dokumentation genereras med kommandot 
\begin_inset Quotes sld
\end_inset

make doc
\begin_inset Quotes srd
\end_inset


\end_layout

\begin_layout Standard
Servern och klienten körs i en Erlang-prompt och därifrån ansluter man till
 en server genom att skriva 
\begin_inset Quotes sld
\end_inset

client:connect(node).
\begin_inset Quotes srd
\end_inset

 där 
\begin_inset Quotes sld
\end_inset

node
\begin_inset Quotes srd
\end_inset

 är adressen till servern.
 Servern kan lämna vältet tomt för att ansluta till sin egna server.
\end_layout

\end_body
\end_document
