#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language swedish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Kid-MUD"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Kid-MUD
\begin_inset Newline newline
\end_inset


\size large
Processorienterad programmering (1DT049) våren 2012.
 Slutrapport för grupp 14
\end_layout

\begin_layout Author
Erik Arnerlöv
\begin_inset Newline newline
\end_inset

900406-0092 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Michael Bergroth
\begin_inset Newline newline
\end_inset

910123-4194 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Magnus Lång
\begin_inset Newline newline
\end_inset

910409-2672 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Mikael Wiberg
\begin_inset Newline newline
\end_inset

840526-0194
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Inledning
\end_layout

\begin_layout Standard
Ett MUD (Multi User Dungeon) är ett textbaserat flerspelarspel där spelare
 utför handlingar genom att skriva dem (såsom 
\begin_inset Quotes sld
\end_inset

go north
\begin_inset Quotes srd
\end_inset

 eller 
\begin_inset Quotes sld
\end_inset

attack Goblin
\begin_inset Quotes srd
\end_inset

).
 Världen är uppdelad i 
\emph on
zoner
\emph default
, och varje spelare befinner sig i en av världens zoner åt gången, och kan
 förflytta sig till intilliggande zoner.
\end_layout

\begin_layout Subsection
Mål och Syfte
\end_layout

\begin_layout Standard
Syftet med projektet är att konstruera ett 
\emph on
MUD
\emph default
 med fokus på samtidighet för att kunna skala på multiprocessorsystem.
 Målet är att bygga ett fullt fungerande 
\emph on
MUD
\emph default
 med så många funktioner som vi hinner med.
\end_layout

\begin_layout Subsection
Avgränsningar
\end_layout

\begin_layout Standard
Vi valde att inte implementera ett Telnet-interface trots att detta är en
 kännetecknande komponent hos ett 
\emph on
MUD
\emph default
 eftersom vi ville lägga fokus på samtidigheten och grundläggande funktionalitet.
 Telnet är ett gammalt protokoll för att ansluta till en terminal över en
 nätverksanslutning.
\end_layout

\begin_layout Section
Kid-MUD
\end_layout

\begin_layout Standard
När man loggar in i systemet så anger man namn på den karaktär man vill
 spela.
 Om karaktären inte finns så skapas den.
 Efter dess så anländer man i en zon.
 När man anländer till en zon så får man en beskrivning av hur zonen ser
 ut, vilka andra spelare och icke-spelare (NPC-er) som står där samt vart
 man kan gå (se Figur 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:loggar-in"

\end_inset

).
 Denna information kan man få upprepad för sig genom att skriva 
\begin_inset Quotes sld
\end_inset


\family typewriter
look
\family default

\begin_inset Quotes srd
\end_inset

.
 Man kan också få endast raden om vart man kan gå genom att skriva 
\begin_inset Quotes sld
\end_inset


\family typewriter
exits
\family default

\begin_inset Quotes srd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
Name?> 
\color red
Gustav
\end_layout

\begin_layout Plain Layout

\family typewriter
Welcome to Kid-MUD!
\end_layout

\begin_layout Plain Layout

\family typewriter
You are on the bridge that connects the town to the outside world.
 Beneath the bridge runs a mighty river and to the south you see a large
 waterfall pouring down huge amounts of water from the tall mountain.
 The sound of the waterfall is almost deafening.
 To the north you can see the river flowing towards the great sea.
 To the west you have the town and to the east you see the road continues
 to follow along the foot of the mountain.
\end_layout

\begin_layout Plain Layout

\family typewriter
Here stands a Frog 
\end_layout

\begin_layout Plain Layout

\family typewriter
There are exits to east, west
\end_layout

\begin_layout Plain Layout

\family typewriter
?> 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
När du loggar in
\begin_inset CommandInset label
LatexCommand label
name "fig:loggar-in"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
När man väl är i en zon så finns det en del saker att göra.
 Man kan till exempel skriva 
\begin_inset Quotes sld
\end_inset


\family typewriter
say 
\emph on
Meddelande
\family default
\emph default

\begin_inset Quotes srd
\end_inset

 för att säga saker till andra spelare i samma zon.
 Man kan även prata privat med en godtyckig spelare genom att skriva 
\begin_inset Quotes sld
\end_inset


\family typewriter
tell 
\emph on
Vem
\emph default
 
\emph on
Meddelande
\family default
\emph default

\begin_inset Quotes srd
\end_inset

.
 Man kan också attackera spelare och icke-spelare genom att skriva 
\begin_inset Quotes sld
\end_inset


\family typewriter
attack 
\emph on
Vem
\family default
\emph default

\begin_inset Quotes srd
\end_inset

, och för att sluta slåss skriver man 
\begin_inset Quotes sld
\end_inset


\family typewriter
stop
\family default

\begin_inset Quotes srd
\end_inset

, eller väntar på att offret dör.
 Om man vill uppskatta sina chanser mot en icke-spelare kan man använda
 kommandot 
\begin_inset Quotes sld
\end_inset


\family typewriter
consider 
\emph on
Vem
\family default
\emph default

\begin_inset Quotes srd
\end_inset

.
 När man inser att man aldrig kan vinna striden man är i så är det lämpligt
 att fly.
 För att gå till en annan zon så skriver man 
\begin_inset Quotes sld
\end_inset


\family typewriter
go 
\emph on
Väderstreck
\family default
\emph default

\begin_inset Quotes srd
\end_inset

.
 Man kan bara gå i de riktningar som antyddes av 
\begin_inset Quotes sld
\end_inset


\family typewriter
exits
\family default

\begin_inset Quotes srd
\end_inset

.
\end_layout

\begin_layout Section
Programmeringsspråk
\end_layout

\begin_layout Standard
Vi valde att skriva systemet i Erlang för att det är ett språk vi trodde
 skulle vara lämpad till att lösa uppgiften så att vi kunde utnyttja oss
 utav samtidighet som uppgiften krävde.
 Fördelarna är att det är väldigt lätt att skriva kod som utnyttjar samtidighet
 och att meddelandepassningen samt de lätta processerna i Erlang fungerar
 väldigt bra till sättet vi valde att lösa problemet på.
 
\end_layout

\begin_layout Standard
Vi har även använt oss av Erlangs Open Telecom Platform (OTP).
 Det är en samling av bibliotek och designprinciper för Erlang som i vårat
 fall har underlättat arbetet.
 De delar av OTP:n vi har använt är 
\emph on
Mnesia
\emph default
, 
\emph on
supervisor
\emph default
 och 
\emph on
gen_server
\emph default
.
 
\emph on
Mnesia
\emph default
 är en databas som har varit mycket behändig för våra datalagringsbehov.
 
\emph on
Supervisor
\emph default
 och 
\emph on
gen_server
\emph default
 är 
\emph on
beteende-moduler
\emph default
 som kan betraktas som basklasser i objektorienterad programmering.
 
\end_layout

\begin_layout Standard
En modul kan använda sig av ett beteende genom att exportera förbestämda
 funktioner, och sedan skicka sitt namn till beteende-modulen, och kallas
 då för en 
\emph on
callback-modul
\emph default
.
 
\emph on
Supervisor
\emph default
 abstraherar processhantering genom att starta, starta om och stoppa processer
 enligt deklarationerna för sina 
\emph on
callback-moduler
\emph default
.
 
\emph on
Gen_server
\emph default
 abstraherar en process som skickar och tar emot meddelanden och tillåter
 programmeraren att fokusera på det som är unikt för sin implementation.
\end_layout

\begin_layout Standard
Nackdelarna med Erlang är främst att meddelandepassande kod är svår att
 enhetstesta och felsöka.
 Mer om detta i avsnitt 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Reflektion"

\end_inset

.
\end_layout

\begin_layout Section
Systemarkitektur
\end_layout

\begin_layout Standard
I Figur 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:moduler"

\end_inset

 kan man se hur modulerna kommunicerar (svart) och är uppdelade i supervisor-trä
d (blått).
 Supervisor-träd är en del av OTP-designprinciperna och är processer, organisera
de i ett träd, som ansvarar för att hålla sina barn igång.
 För att starta ett program så startar man helt enkelt dess rot-supervisor,
 eller 
\emph on
master supervisor
\emph default
.
 Utöver rot-supervisorn så innehåller vårt projekt tre dynamiska supervisors,
 som inte har några barn vid uppstart, men som lägger till och tar bort
 dem dynamiskt, 
\emph on
npc_sup
\emph default
, 
\emph on
player_sup
\emph default
 och 
\emph on
zone_sup
\emph default
.
 Nedan beskrivs alla modulers uppgifter.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename system_architecture.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Moduler som kommuniserar och supervisorträd
\begin_inset CommandInset label
LatexCommand label
name "fig:moduler"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
client
\end_layout

\begin_deeper
\begin_layout Standard
Denna modul startas av en spelare som vill spela och skickar vidare kommandon
 skrivna av spelaren samt tar emot meddelanden om vad som händer och skriver
 ut dem på skärmen.
 
\end_layout

\end_deeper
\begin_layout Description
player
\end_layout

\begin_deeper
\begin_layout Standard
player är den modul som ligger emellan klienten och själva systemet.
 Alla kommandon som spelaren skriver skickas från client till player som
 sedan tolkar kommandot med parser och utför kommandot genom att skicka
 vidare meddelanden till andra moduler.
 player håller även reda på spelarens status, såsom om man är i en strid
 och spelarens liv.
\end_layout

\end_deeper
\begin_layout Description
playermaster
\end_layout

\begin_deeper
\begin_layout Standard
När en spelare loggar in så ber client playermaster om att få logga in.
 Om det accepteras så startas en player-process med hjälp av player_sup
 som ansluts till client.
 Har även en lista över alla inloggade spelare och har funktioner för att
 skicka meddelanden till alla vid speciella händelser samt att vidarebefodra
 privata meddelanden.
\end_layout

\end_deeper
\begin_layout Description
player_sup
\end_layout

\begin_deeper
\begin_layout Standard
En dynamisk supervisor för alla player-processer.
\end_layout

\end_deeper
\begin_layout Description
zone
\end_layout

\begin_deeper
\begin_layout Standard
zone tar hand om det som rör en specifik zon.
 Den har data såsom närliggande zoners ID och listor över spelare och NPCs.
 Det är zonen som skickar ut meddelanden till andra spelare som säger vad
 som händer.
 När en zon startas så startar den alla NPCs i den via npc_sup.
\end_layout

\end_deeper
\begin_layout Description
zonemaster
\end_layout

\begin_deeper
\begin_layout Standard
Modulen har koll på vilka zoner som är aktiva, dvs zoner som körs i en egen
 process.
 Om en spelare vill gå till en inaktiv zon så startar zonemaster den zonen
 via zone_sup.
\end_layout

\end_deeper
\begin_layout Description
zone_sup
\end_layout

\begin_deeper
\begin_layout Standard
En dynamisk supervisor för alla zone-processer
\end_layout

\end_deeper
\begin_layout Description
npc
\end_layout

\begin_deeper
\begin_layout Standard
npc har hand om information om och simulerar specifika NPCs.
\end_layout

\end_deeper
\begin_layout Description
npc_sup
\end_layout

\begin_deeper
\begin_layout Standard
En dynamisk supervisor för alla npc-processer.
\end_layout

\end_deeper
\begin_layout Description
parser
\end_layout

\begin_deeper
\begin_layout Standard
Omvandlar ett kommando från spelaren i text till en form (atomer och tupler)
 som lättare förstås av player.
\end_layout

\end_deeper
\begin_layout Description
database
\end_layout

\begin_deeper
\begin_layout Standard
Gränssnitt mot databasen för systemet som lagrar information om zoner, spelare
 och NPCer.
 Erbjuder lättanvända metoder för att läsa, skriva och söka i databasen.
 Sköter även att uppdatera databasen med karta (via maploader) och NPC-typer.
 
\end_layout

\end_deeper
\begin_layout Description
kidmud
\end_layout

\begin_deeper
\begin_layout Standard
Sköter uppstart av servern genom att initiera databasen samt starta master_super
visor.
\end_layout

\end_deeper
\begin_layout Description
maploader
\end_layout

\begin_deeper
\begin_layout Standard
Modul som kan läsa en karta från en fil och ladda in den i databasen.
\end_layout

\end_deeper
\begin_layout Description
master_supervisor
\end_layout

\begin_deeper
\begin_layout Standard
Rot-supervisor för playermaster, zonemaster, player_sup, zone_sup och npc_sup.
\end_layout

\end_deeper
\begin_layout Section
Samtidighet
\end_layout

\begin_layout Standard
I Erlang så används message passing för att kommunicera mellan processer.
 Det är väldigt lättanvänt och vi slipper att fundera på synkronisiering
 med delat minne och liknande problem.
 Med hjälp av OTP Design Principles så har vi delat upp message passing
 mellan processer i två olika typer.
 
\end_layout

\begin_layout Standard
Den första typen är calls, de ska användas när en process vill ha ett svar
 på sitt meddelande.
 Detta garanterar att processen som vi kommunicerar med ska skicka tillbaka
 ett svar direkt efter den har hanterat meddelandet.
 
\end_layout

\begin_layout Standard
Den andra typen är casts, de ska användas när en process inte vill ha ett
 svar från processen som den skickar sitt meddelande till.
 Detta leder till att synkronisiering kan hanteras på ett smidigt sätt när
 processer pratar med varandra.
 Vilket i sin tur leder till snabbare och mer robust kommunikation.
 
\end_layout

\begin_layout Standard
I våran nuvarande struktur har vi designat koden och modulerna på ett sätt
 som ska förhindra att deadlocks ska uppstå.
 Vi använder oss av enkelriktad kommunikation när processer kommunicerar
 med calls, detta gör så att vi inte kan få några cirkulära vänteproblem.
 
\end_layout

\begin_layout Section
Algoritmer och datastrukturer
\end_layout

\begin_layout Standard
De datastrukturer som främst använts är erlangs tupler och records.
 Även listor har används av till exempel 
\emph on
playermaster
\emph default
 för att hålla reda på inloggade spelare, och 
\emph on
zone
\emph default
 för att hålla reda på vilka spelare och icke-spelare som är inloggade.
 I 
\emph on
zonemaster
\emph default
 så används istället ett bbst (balanserat binärt sökträd) ur erlang-modulen
 
\emph on
gb_tree
\emph default
 för att kunna slå i aktiva zoner efter id, detta för att förbättra dess
 prestanda.
\end_layout

\begin_layout Standard

\emph on
Records
\emph default
 är en mycket vanlig notation i funktionella språk, som fungerar ungefär
 som en tupel, men där varje element, 
\emph on
fält
\emph default
, ges ett namn, och kan plockas ut ur recorden genom att man uppger dess
 namn.
 Records är praktiska eftersom de går att spara i en mnesia-tabell, och
 för att man kan lägga till fält utan att existerande kod slutar fungera.
 Exempelvis används syntaxen 
\begin_inset Quotes sld
\end_inset


\family typewriter
State#state{players=UpdatedPlayers}
\family default

\begin_inset Quotes srd
\end_inset

 flitigt, det betyder 
\begin_inset Quotes sld
\end_inset

State men med fältet players satt till UpdatedPlayers
\begin_inset Quotes srd
\end_inset

.
 Utan records skulle man istället skrivit en tupel med tiotals element där
 alla utom ett är detsamma som innan.
\end_layout

\begin_layout Standard
När det gäller algoritmer så har vi inte implementerat något mer komplicerat
 än att traversera elementen i en lista, eller raderna i en fil, och utför
 en handling på varje, dessa främst i 
\emph on
zone
\emph default
 och 
\emph on
maploder
\emph default
.
 Övriga algoritmer har uteslutande inbyggda funktioner använts till, främst
 ur modulerna 
\emph on
gb_tree
\emph default
 och 
\emph on
lists
\emph default
.
 
\end_layout

\begin_layout Standard
När det gäller 
\emph on
parser
\emph default
 så är den en wrapper runt en automatiskt genererad parsermodul 
\emph on
parser_grammar
\emph default
 som genereras av Neotoma
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "github.com/seancribbs/neotoma"
target "https://github.com/seancribbs/neotoma"

\end_inset


\end_layout

\end_inset

, ett parsergeneratorbibliotek, ur filen 
\begin_inset Quotes sld
\end_inset

parser_grammar.peg
\begin_inset Quotes srd
\end_inset

.
 Detta innebär att algoritmen för att tolka spelarkommandon skrivs automatiskt.
 Grammatiken beskriver de kommandon som man kan skriva och hur de skall
 representeras i erlang-data.
 Exempelvis så är kommandot 
\begin_inset Quotes sld
\end_inset

kill
\begin_inset Quotes srd
\end_inset

 definierat såhär:
\end_layout

\begin_layout Standard

\family typewriter
attack_command <- ("attack " / "kill ") .* `
\end_layout

\begin_layout Standard

\family typewriter
[_, Letters] = Node,
\end_layout

\begin_layout Standard

\family typewriter
{attack, unicode:characters_to_list(Letters)}`;
\end_layout

\begin_layout Standard
Första raden definierar vad som kan tolkas som ett 
\begin_inset Quotes sld
\end_inset

attack_command
\begin_inset Quotes srd
\end_inset

 och det är antingen 
\begin_inset Quotes sld
\end_inset

attack 
\begin_inset Quotes sld
\end_inset

 eller 
\begin_inset Quotes sld
\end_inset

kill 
\begin_inset Quotes sld
\end_inset

 följt av vad som helst.
 De följande två raderna är Erlang, och säger hur det skall representeras
 i erlang-data.
 Här så binder vi andra delen av kommandot (vad som helst-biten) till Letters,
 och omvandlar det sedan till en sträng, och ger slutligen ett svar på formen
 
\family typewriter
{attack, Namn}
\family default
.
\end_layout

\begin_layout Section
Förslag på förbättringar
\end_layout

\begin_layout Description
Command
\begin_inset space ~
\end_inset

Autocompletion Istället för att behöva skriva all text fullständigt så kan
 det vara behändigt att lägga till ett system som fyller i resten av ett
 t ex.
 kommando som är halvt skrivet.
 Detta är bara tillgängligt om det endast finns ett unikt 
\begin_inset Quotes sld
\end_inset

slut
\begin_inset Quotes srd
\end_inset

 på den text man skriver.
\end_layout

\begin_layout Description
Nedstänging
\begin_inset space ~
\end_inset

av
\begin_inset space ~
\end_inset

server När man inaktiverar servern så skall alla spelare som är inloggade
 få ett medelande att server håller på att stängas ner och därför kommer
 de loggas ut om x antal sekunder.
 Sedan sparars världen och användaren kan ansluta till servern och komma
 till där dom var precis innan servern gick ner.
\end_layout

\begin_layout Description
Grafiska
\begin_inset space ~
\end_inset

förbättringar Olika 
\begin_inset Quotes sld
\end_inset

typer
\begin_inset Quotes srd
\end_inset

 av text skall vara i olika färger så det blir lättare att läsa, även att
 man alltid ska kunna se hur mycket liv man har genom att det alltid står
 längst ner i textrutan för att underlätta strider mellan spelaren och andra.
\end_layout

\begin_layout Description
Inloggningslösenord Varje spelare får välja ett lösenord som de skall använda
 för att logga in.
 Detta för att unvika att oönskade personer får tillträde till karaktärer
 de inte får använda.
\end_layout

\begin_layout Description
Färdighetssystem För att göra allt mer intresant så skulle ett system där
 spelaren kan utvecklas och lära sig nya färdigheter.
 Exempel på färdigheter skulle kunna vara att slå snabbare med ett svärd
 eller lära sig att använda en yxa på ett effektivt sätt.
 Detta kommer göra att strider blir mer intresanta och mindre enformiga.
\end_layout

\begin_layout Description
Personifiera
\begin_inset space ~
\end_inset

karaktärer För att unvika att alla spelare ser ungefär 
\begin_inset Quotes sld
\end_inset

likadana
\begin_inset Quotes srd
\end_inset

 ut så skulle man kunna lägga till en ålder vilket t ex medför att man får
 högre 
\emph on
Intelligence
\emph default
 vilket kanske leder till att man har lättare för att använda magi.
\end_layout

\begin_layout Section
Reflektion
\begin_inset CommandInset label
LatexCommand label
name "sec:Reflektion"

\end_inset


\end_layout

\begin_layout Standard
Detta projekt har framförallt gett oss en fördjupning i Erlang men även
 hur det är att arbeta i grupp.
 Vi valde att sitta tillsammans när vi jobbade eftersom det är väldigt smidigt
 om man behöver hjälp med något eller kanske behöver diskutera ett förslag
 på en t ex förändring.
\end_layout

\begin_layout Standard
I början så blev det så att vi dela upp arbetet så varje person fick var
 sin 
\begin_inset Quotes sld
\end_inset

modul
\begin_inset Quotes srd
\end_inset

 att fokusera på.
 Vi hade förbestämt vad varje modul skulle innehålla för funktionalitet.
 Problemet med detta var att vissa moduler krävde mindre arbete än andra,
 vilket ledde till att ibland så blev det en del väntande på att en viss
 modul skulle bli klar.
 En förbättring till detta skulle kunna vara att lägga lite mer tid på att
 uppskatta hur lång tid olika delar tar att implementera.
 
\end_layout

\begin_layout Standard
Det som har vart svårt med projektet är att debugga och göra testfall.
 Detta eftersom att det mesta körs 
\begin_inset Quotes sld
\end_inset

samtidigt
\begin_inset Quotes srd
\end_inset

 och när man får ett fel så kan det vara svårt att lokalisera precis vart
 felet uppstår.
 Detta eftersom att det inte finns någon så kallad 
\begin_inset Quotes sld
\end_inset

stack trace
\begin_inset Quotes srd
\end_inset

, vilket gör att man bara ser vilken modul som har krashat.
 Problemet där kan vara att den modul som krashade står inte själv för krashen
 utan någon annan modul kan vara delaktig i det hela.
\end_layout

\begin_layout Section
Installation och fortsatt utveckling
\end_layout

\begin_layout Standard
De versioner av Erlang som använts är R15B01 och R15B.
 Koden finns att hämta på GitHub
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "github.com/margnus1/kid-mud"
target "http://github.com/margnus1/kid-mud"

\end_inset


\end_layout

\end_inset

, och kan hämtas, om man har Git, med kommandot 
\begin_inset Quotes sld
\end_inset


\family typewriter
git clone git://github.com/margnus1/kid-mud.git
\family default

\begin_inset Quotes srd
\end_inset

.
 Katalogstrukturen kan ses i Tabell 
\begin_inset CommandInset ref
LatexCommand vref
reference "tab:katalogstruktur"

\end_inset

.
 
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
doc/src
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Innehåller genererad dokumentation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
doc/pdf
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Innehåller rapporter i pdf-format
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
doc/src
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Innehåller rapporter i källformat
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ebin/
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Innehåller kompilerad kod
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
include/
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Innehåller headerfiler med typdeklarationer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
neotoma/
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Innehåller parser-generatorn Neotoma.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
priv/
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Innehåller datafiler som används vid körtid
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
src/
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Innehåller källkoden
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Katalogstruktur
\begin_inset CommandInset label
LatexCommand label
name "tab:katalogstruktur"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Systemet använder sig av Make så kompilering görs med kommandot 
\begin_inset Quotes sld
\end_inset


\family typewriter
make
\family default

\begin_inset Quotes srd
\end_inset

.
 Enhetstester finns och använder sig av EUnit, dessa körs med kommandot
 
\begin_inset Quotes sld
\end_inset


\family typewriter
make test
\family default

\begin_inset Quotes srd
\end_inset

.
 Dokumentationsgenerering finns det också stöd av i form av samt EDoc-kommentare
r.
 Den gerereras med kommandot 
\begin_inset Quotes sld
\end_inset


\family typewriter
make doc
\family default

\begin_inset Quotes srd
\end_inset

.
\end_layout

\begin_layout Standard
Klienten körs i en Erlang-prompt och startas med kommandot 
\begin_inset Quotes sld
\end_inset


\family typewriter
make start_client
\family default

\begin_inset Quotes srd
\end_inset

.
 Därifrån ansluter man till en server genom att skriva 
\begin_inset Quotes sld
\end_inset


\family typewriter
client:connect(Node).
\family default

\begin_inset Quotes srd
\end_inset

 där 
\begin_inset Quotes sld
\end_inset


\family typewriter
Node
\family default

\begin_inset Quotes srd
\end_inset

 är namnet på den erlang-nod som kör servern, vanligtvis en atom på formen
 kidserver@Server där 
\begin_inset Quotes sld
\end_inset

Server
\begin_inset Quotes srd
\end_inset

 är namnet på maskinen som kör servern.
\end_layout

\begin_layout Standard
För att kunna köra en server så måste man först konfigurera en databas.
 Detta behövs bara göras en gång och utförs genom att skriva 
\begin_inset Quotes sld
\end_inset


\family typewriter
make setup
\family default

\begin_inset Quotes srd
\end_inset

.
 Därefter så startar man servern genom att skriva 
\begin_inset Quotes sld
\end_inset


\family typewriter
make start_server
\family default

\begin_inset Quotes srd
\end_inset

.
 Man kan från serverprompten ansluta till sin egen server genom att skriva
 
\begin_inset Quotes sld
\end_inset


\family typewriter
client:connect().
\family default

\begin_inset Quotes srd
\end_inset

.
\end_layout

\end_body
\end_document
